/* 
do not edit this file,
1. edit files in folder html_files 
2. run make_html.py
*/
#include <stdint.h>

const char html_IRController[] = R"=====(<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <script src="IRcontroller.js" defer></script>
    <title>IR controller</title>
</head>

<body>
    <h1 class="title">IR controller</h1>
    <div class="body">
        <div class="card-grid">
            <div class="card" id="power">
                <i class="material-icons card-icon">power</i>
                <span class="card-title">Power</span>
            </div>
        </div>
        <div class="card-grid">
            <div class="card-slider card" id=temperature>
                <span>Temperature:</span>
                <input type="range" min="1" max="100" value="50" class="slider" id="myRange">
            </div>
        </div>
        <div class="card-grid">
            <div class="card" id="mode">
                <i class="icon-choose">
                    <!-- TODO: add more modes -->
                    <i class="material-icons card-icon">ac_unit</i>
                    <i style="display: none;" class="material-icons card-icon">local_fire_department</i>
                </i>
                <span class="card-title">mode</span>
            </div>
            <div class="card" id="fan">
                <i class="icon-choose">
                    <!-- TODO: choose more icons that fit -->
                    <i class="material-icons card-icon">air</i>
                    <!-- <i style="display: none;" class="material-icons card-icon">nightlight</i> -->
                </i>
                <span class="card-title">fan</span>
            </div>
            <div class="card" id="sound">
                <i class="icon-choose">
                    <i class="material-icons card-icon">volume_up</i>
                    <i style="display: none;" class="material-icons card-icon">volume_off</i>
                </i>
                <span class="card-title">sound</span>
            </div>
            <div class="card" id="screen">
                <i class="icon-choose">
                    <i class="material-icons card-icon">light_mode</i>
                    <i style="display: none;" class="material-icons card-icon">nightlight</i>
                </i>
                <span class="card-title">screen</span>
            </div>
            <div class="card" id="timer">
                <i class="material-icons card-icon">update</i>
                <span class="card-title">timer</span>
            </div>
            <div class="card" id="custom">
                <i class="material-icons card-icon">add</i>
                <span class="card-title">custom</span>
            </div>
        </div>
    </div>
    <script>
        function myFunction() {
            var x = document.getElementById("myDIV");
            if (x.style.display === "none") {
                x.style.display = "block";
            } else {
                x.style.display = "none";
            }
        }
    </script>

    <form action="/irSend" method="GET">
        <label for="protocol">protocol</label>
        <input type="number" id="protocol" name="protocol" value="18"><br><br>
        <label for="model">model</label>
        <input type="number" id="model" name="model" value="1"><br><br>
        <label for="mode">mode</label>
        <select id="mode" name="mode">
            <option value="-1">Off</option>
            <option value="0" selected="selected">Auto</option>
            <option value="1">Cool</option>
            <option value="2">Heat</option>
            <option value="3">Dry</option>
            <option value="4">Fan</option>
        </select><br><br>
        <label for="celsius">celsius</label>
        <input type="hidden" name="celsius" value="1"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value" checked><br><br>
        <label for="degrees">degrees</label>
        <input type="number" id="degrees" name="degrees" value="23"><br><br>
        <label for="fanspeed">fanspeed</label>
        <select id="fanspeed" name="fanspeed">
            <option value="0">Auto</option>
            <option value="1">Min</option>
            <option value="2">Low</option>
            <option value="3">Medium</option>
            <option value="4">High</option>
            <option value="5">Max</option>
        </select><br><br>
        <label for="swingv">swingv</label>
        <select id="swingv" name="swingv">
            <option value="-1">Off</option>
            <option value="0">Auto</option>
            <option value="1">Highest</option>
            <option value="2">High</option>
            <option value="3">Middle</option>
            <option value="4">Low</option>
            <option value="5">Lowest</option>
        </select><br><br>
        <label for="swingh">swingh</label>
        <select id="swingh" name="swingh">
            <option value="-1">Off</option>
            <option value="0">Auto</option>
            <option value="1">LeftMax</option>
            <option value="2">Left</option>
            <option value="3">Middle</option>
            <option value="4">Right</option>
            <option value="5">RightMax</option>
            <option value="5">Wide</option>
        </select><br><br>
        <label for="light">light</label>
        <input type="hidden" name="light" value="1"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value" checked><br><br>
        <label for="beep">beep</label>
        <input type="hidden" name="beep" value="1"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value" checked><br><br>
        <label for="econo">econo</label>
        <input type="hidden" name="econo" value="1"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value" checked><br><br>
        <label for="filter">filter</label>
        <input type="hidden" name="filter" value="1"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value" checked><br><br>
        <label for="turbo">turbo</label>
        <input type="hidden" name="turbo" value="0"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value"><br><br>
        <label for="quiet">quiet</label>
        <input type="hidden" name="quiet" value="0"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value"><br><br>
        <label for="sleep">sleep</label>
        <input type="number" id="sleep" name="sleep" value="-1"><br><br>
        <label for="clean">clean</label>
        <input type="hidden" name="clean" value="1"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value" checked><br><br>
        <label for="clock">clock</label>
        <input type="number" id="clock" name="clock" value="-1"><br><br>
        <label for="power">power</label>
        <input type="hidden" name="power" value="1"><input type="checkbox"
            onclick="this.previousSibling.value=1-this.previousSibling.value" checked><br><br>
        <input type="submit" value="Submit">
    </form>

    <form action="/">
        <br>
        <button>back to menu</button>
    </form>


    <!-- TODO: add sensor -->
    <!-- <script>
        setInterval(function () {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var temp = this.responseText;
                    document.getElementById("temp").textContent = temp;
                }
            };
            xhttp.open("GET", "/temp", true);
            xhttp.send();
        }, 1000);
    </script> -->
</body>

</html>)=====";

const char html_menu[] = R"=====(<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>menu</title>
</head>

<body>
    <h2>Welcome to esp server</h2>

    <form action="/irController">
        <br>
        <button>IR Controller</button>

    </form>

    <form action="/wifiLogin">
        <br>
        <button>WIFI Setting</button>
    </form>
    <div>sensor data:</div>
    <div id="temp">
        124243
    </div>
    <script>
        setInterval(function () {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var temp = this.responseText;
                    document.getElementById("temp").textContent = temp;
                }
            };
            xhttp.open("GET", "/temp", true);
            xhttp.send();
        }, 1000);


    </script>


</body>

</html>)=====";

const char html_wifiLogin[] = R"=====(<!DOCTYPE html>
<html>

<head>
  <meta charset='utf-8'>
  <meta http-equiv='X-UA-Compatible' content='IE=edge'>
  <title>Wifi Config</title>
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <link rel="stylesheet" href="style.css">
</head>

<body>
  <h2>WIFI connection setting</h2>
  <!-- back button -->
  <form action="/wifiInfo" method="POST">
    <!-- dropdown by the board search -->
    <label for="ssid">WIFI SSID:</label>
    <select id="mode" name="mode">

    </select><br><br>
    <label for="password">WIFI password:</label>
    <input type="password" id="password" name="password"><br><br>
    <input type="submit" value="set">
  </form>

  <form action="/">
    <br>
    <button>back to menu</button>

  </form>

  <script>

    function updateList() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          let message = this.responseText;
          let ssid = JSON.parse(message).SSID;
          let list = document.getElementById("mode");
          for (let index = 0; index < ssid.length; index++) {
            option = document.createElement('option');
            option.value = option.text = ssid[index];
            list.add(option);
          }
        }
      };
      xhttp.open("GET", "/getWireless", true);
      xhttp.send();
    }

    function remove() { // not working
      var selectObject = document.getElementById("mode");
      for (var i = 0; i < selectObject.length; i++) {
        selectObject.remove(i);
      }
    }

    updateList();

  </script>
</body>

</html>)=====";

const char style[] = R"=====(:root {
    --bg-color: lightblue;
    background-color: var(--bg-color);
    font-size: 2vw;
}
.title {
    position: sticky;
    background-color: var(--bg-color);
    color: black;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 3em;
    text-align: center;
    top: 0;
    margin-top: 0;
    margin-bottom: 0;
    width: 100%;
    z-index: 1;
}
.body {
    padding: 10px;
    display: flex;
    flex-direction: column;
    /* justify-content: center; */
    align-items: center;
}
.card-grid{
    display: grid;
    grid-template-columns: auto auto;
    font-size: 2em;
}
.card {
    margin: 5px;
    background-color: grey;
    padding: 5px 10px 10px 10px; 
    border-radius: 10px;
    border: 2px solid grey;
    transition-duration: 0.4s;
    color: white; 
    cursor: pointer;
}
.card:hover {
    background-color: lightgray;
    text-shadow: 5px 5px 6px rgb(63, 62, 62);
}

i.card-icon {
    position: relative;
    translate: 50px;
    font-size: 1em;
    top: 0.2em;
}
.card-slider {
    transition-duration: 0.4s;
    font-size: 0.5em;
    width:40vw;
}
.card-slider:hover {
    background-color: rgb(110, 110, 110);
    text-shadow: 5px 5px 6px rgb(63, 62, 62);
}
.slider {
    margin: 5px;
    -webkit-appearance: none;
    width: 100%;
    height: 15px;
    border-radius: 5px;
    background: #f5f5f5;
    outline: none;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
}
.slider:hover {
    opacity: 1;
}   
.slider::-webkit-slider-thumb{
    -webkit-appearance: none;
    appearance: none;
    width: 25px;
    height: 25px;
    border-radius: 50%; 
    background: #222222;
    cursor: pointer;
})=====";

const char IRcontroller[] = R"=====(ACproperty = {
    "protocol": 18,
    "model": 1,
    "mode": 0,
    "celsius": 1,
    "degrees": 23,
    "fanspeed": 0,
    "swingv": -1,
    "swingh": -1,
    "light": 1,
    "beep": 1,
    "econo": 1,
    "filter": 1,
    "turbo": 0,
    "quiet": 0,
    "sleep": -1,
    "clean": 1,
    "clock": -1,
    "power": 1
}

function click(evt) {
    // alert(evt.currentTarget["id"]);
    if (ACproperty[evt.currentTarget["id"]] == 1) {
        ACproperty[evt.currentTarget["id"]] = 0
        evt.currentTarget.getElementsByClassName("card-icon")[0].style.color = "red"
    } else {
        ACproperty[evt.currentTarget["id"]] = 1
        evt.currentTarget.getElementsByClassName("card-icon")[0].style.color = "green"
    }
    httpGet()

}
// TODO: send as: /irSend?protocol=18&model=1&mode=0&celsius=1&degrees=23&fanspeed=0&swingv=-1&swingh=-1&light=1&beep=1&econo=1&filter=1&turbo=0&quiet=0&sleep=-1&clean=1&clock=-1&power=1
// or as json - but change the esp code <- better
function httpGet() {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "/irSend", false); // false for synchronous request
    // xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    xmlHttp.send(ACproperty);
    return xmlHttp.responseText;
}
const collection = document.getElementsByClassName("card");
[].forEach.call(collection, function (element) {
    element.addEventListener("click", click)
});

)=====";

